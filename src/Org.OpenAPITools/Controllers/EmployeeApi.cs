/*
 * Biletado services
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dh@blaimi.de
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;
using Microsoft.AspNetCore.Connections;
using System.Net.Http;
using Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal;
using personal.Helpers;
using Npgsql.Internal.TypeHandlers;
using System.Runtime.CompilerServices;
using System.Security.Claims;
using Microsoft.Extensions.Primitives;
using Microsoft.AspNetCore.Authentication;

namespace Org.OpenAPITools.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EmployeeApiController : ControllerBase
    {
        private readonly DatabaseContext databaseContext;

        public EmployeeApiController(DatabaseContext dbContext)
        {
            databaseContext = dbContext;
        }

        /// <summary>
        /// get all employees
        /// </summary>
        /// <response code="200">successful operation</response>
        [HttpGet]
        [Route("/personal/employees/")]
        [ValidateModelState]
        [SwaggerOperation("PersonalEmployeesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalEmployeesGet200Response), description: "successful operation")]
        public virtual IActionResult PersonalEmployeesGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalEmployeesGet200Response));
            //string exampleJson = null;
            //exampleJson = "{\n  \"employees\" : [ {\n    \"name\" : \"Max Specimeno\",\n    \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\n  }, {\n    \"name\" : \"Max Specimeno\",\n    \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\n  } ]\n}";

            //var example = exampleJson != null
            //  ? JsonConvert.DeserializeObject<PersonalEmployeesGet200Response>(exampleJson)
            //  : default(PersonalEmployeesGet200Response);
            //TODO: Change the data returned
            //return new ObjectResult(example);

            var employees = databaseContext.employees;
            return new JsonResult(employees);

        }

        /// <summary>
        /// delete an employee by id
        /// </summary>
        /// <param name="id">uuid of the employee</param>
        /// <response code="204">successful operation</response>
        /// <response code="401">if no (valid) authentication is given</response>
        /// <response code="404">not found</response>
        /// <response code="422">deletion not possible because of existing assignments</response>
        [HttpDelete]
        [Route("/personal/employees/{id}/")]
        [ValidateModelState]
        [SwaggerOperation("PersonalEmployeesIdDelete")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "if no (valid) authentication is given")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "deletion not possible because of existing assignments")]
        public virtual IActionResult PersonalEmployeesIdDelete([FromRoute(Name = "id")][Required] Guid id)
        {
            var employee = databaseContext.employees.Find(id);
            if (employee != null)
            {
                foreach (var assignement in databaseContext.assignments)
                {
                    if (assignement.employee_id == employee.id)
                    {
                        //hat noch assignements
                        return StatusCode(422, "deletion not possible because of existing assignments");
                    }
                }


                databaseContext.Remove(employee);
                databaseContext.SaveChanges();
                return StatusCode(204, "successful operation");
            }
            else
            {
                return StatusCode(404);
            }

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// get an employee by id
        /// </summary>
        /// <param name="id">uuid of the employee</param>
        /// <response code="200">successful operation</response>
        /// <response code="404">not found</response>
        [HttpGet]
        [Route("/personal/employees/{id}/")]
        [ValidateModelState]
        [SwaggerOperation("PersonalEmployeesIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Employee), description: "successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "not found")]
        public virtual IActionResult PersonalEmployeesIdGet([FromRoute(Name = "id")][Required] Guid id)
        {
            var employee = databaseContext.employees.Find(id);
            if (employee!= null)
            {
                return StatusCode(200, new JsonResult(employee));
            }
            else return StatusCode(404, default(Error));
        }

        /// <summary>
        /// add or update an employee by id
        /// </summary>
        /// <remarks>if an id is supplied in the object, it MUST match with the one in the url</remarks>
        /// <param name="id">uuid of the employee</param>
        /// <param name="employee"></param>
        /// <response code="204">successful operation</response>
        /// <response code="400">invalid input</response>
        /// <response code="401">if no (valid) authentication is given</response>
        /// <response code="422">mismatching id in url and object</response>
        [HttpPut]
        [Route("/personal/employees/{id}/")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PersonalEmployeesIdPut")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "invalid input")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "if no (valid) authentication is given")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "mismatching id in url and object")]
        public virtual IActionResult PersonalEmployeesIdPut([FromRoute(Name = "id")][Required] Guid id, [FromBody] Employee employee)
        {

            if (employee.id == Guid.Empty) { return StatusCode(422); }

            if (employee.id == id)
            {
                var exis_empl = databaseContext.employees.Find(employee.id);
                if (exis_empl != null) //id gegeben und wurde gefunden UPDATE
                {
                    exis_empl.name = employee.name;
                    databaseContext.Update(exis_empl);
                }
                else //id ist unbekannt oder wurde nicht gefunden CREATE
                {
                    databaseContext.employees.Add(employee);
                }
                databaseContext.SaveChanges();
                return StatusCode(204);


            }
            else return StatusCode(422, "Mismatch in ID and Object");
        }

        //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(204);
        //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(400, default(Error));
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(422, default(Error));




        /// <summary>
        /// add a new employee
        /// </summary>
        /// <remarks>MAY contain a uuid. If so, this method does the same checks as &#x60;PUT&#x60; does.</remarks>
        /// <param name="employee"></param>
        /// <response code="200">Successful operation of updating an existing employee. This can only happen if a uuid gets passed. </response>
        /// <response code="201">successful operation of creating a new employee</response>
        /// <response code="400">invalid input</response>
        /// <response code="401">if no (valid) authentication is given</response>
        [HttpPost]
        [Route("/personal/employees/")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PersonalEmployeesPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Employee), description: "Successful operation of updating an existing employee. This can only happen if a uuid gets passed. ")]
        [SwaggerResponse(statusCode: 201, type: typeof(Employee), description: "successful operation of creating a new employee")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "invalid input")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "if no (valid) authentication is given")]
        public virtual IActionResult PersonalEmployeesPost([FromBody] Employee employee)
        {
            if(HttpContext.Request.Headers.TryGetValue("Authorization", out StringValues headerValue))
            {
                string token = headerValue;
                if (!string.IsNullOrEmpty(token) && token.StartsWith("Bearer "))
                {
                    token = token.Substring("Bearer ".Length);

                    JwtValidate jwtValidate = new JwtValidate();
                    if (!jwtValidate.validateToken(token))
                    {
                        return StatusCode(401, "Not Validated");
                    }
                }

            }
            
            if (employee.id == Guid.Empty)
            {
                //No id is given in request body So it creates employee id, pushes employee with id and name to database 
                employee.id = Guid.NewGuid();
                databaseContext.employees.Add(employee);
                databaseContext.SaveChanges();
            }
            else
            {
                var exis_empl = databaseContext.employees.Find(employee.id);
                if (exis_empl != null) //id gegeben und wurde gefunden UPDATE
                {
                    exis_empl.name = employee.name;
                    databaseContext.Update(exis_empl);
                    databaseContext.SaveChanges();
                }
                else //id ist unbekannt oder wurde nicht gefunden CREATE
                {
                    databaseContext.employees.Add(employee);
                    databaseContext.SaveChanges();
                }
            }
            //Validate Fehlgeschlagen --> 401
            //TODO: http://${KEYCLOAK_HOST}/auth/realms/${KEYCLOAK_REALM}/protocol/openid-connect/certs


            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Employee));
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Employee));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"name\" : \"Max Specimeno\",\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Employee>(exampleJson)
            : default(Employee);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
